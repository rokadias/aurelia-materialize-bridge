import { BindingEngine } from "aurelia-binding";
import { TaskQueue } from "aurelia-task-queue";
import { Logger } from "aurelia-logging";
import { ValidateResult } from "aurelia-validation";
import { MaterializeFormValidationRenderer } from "..";
export declare class MdSelect {
    private bindingEngine;
    private taskQueue;
    constructor(element: Element, bindingEngine: BindingEngine, taskQueue: TaskQueue);
    log: Logger;
    element: HTMLInputElement;
    disabled: boolean | string;
    readonly: boolean | string;
    readonlyChanged(): void;
    enableOptionObserver: boolean | string;
    label: string;
    showErrortext: boolean | string;
    suspendUpdate: boolean;
    subscriptions: any[];
    inputField: HTMLDivElement;
    input: HTMLInputElement;
    dropdownMutationObserver: any;
    optionsMutationObserver: any;
    attached(): void;
    detached(): void;
    refresh(): void;
    labelChanged(newValue: any): void;
    updateLabel(): void;
    disabledChanged(newValue: any): void;
    showErrortextChanged(): void;
    setErrorTextAttribute(): void;
    notifyBindingEngine(): void;
    handleChangeFromNativeSelect(): void;
    handleChangeFromViewModel(newValue: any): void;
    toggleControl(disable: any): void;
    createMaterialSelect(destroy: any): void;
    makeReadonly(input: any): void;
    observeVisibleDropdownContent(attach: any): void;
    observeOptions(attach: any): void;
    open(): void;
    taskqueueRunning: boolean;
    handleBlur(): void;
    handleFocus(): void;
    mdUnrenderValidateResults: (results: ValidateResult[], renderer: MaterializeFormValidationRenderer) => void;
    mdRenderValidateResults: (results: ValidateResult[], renderer: MaterializeFormValidationRenderer) => void;
}
